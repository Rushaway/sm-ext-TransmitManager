name: Build

on: [push, pull_request, workflow_dispatch] 

jobs:
  build:
    name: Build for CSS on Ubuntu
    runs-on: ubuntu-20.04

    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Checkout AMBuild
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/ambuild
          path: ambuild

      - name: Install AMBuild
        uses: BSFishy/pip-action@v1
        with:
          packages: ./ambuild

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      - name: Checkout MetaMod
        uses: actions/checkout@v4
        with:
            repository: alliedmodders/metamod-source
            path: metamod-source
            submodules: recursive

      - name: Checkout SourceMod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/sourcemod
          ref: 1.12-dev
          path: sourcemod
          submodules: recursive

      - name: Checkout hl2sdk-css
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: css
          path: hl2sdk-css

      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 99999
          path: extension

      - name: Prepare CSS SDK libraries
        run: |
          # Créer le dossier lib/linux s'il n'existe pas
          mkdir -p hl2sdk-css/lib/linux
          
          # Copier libtier0_srv.so depuis la racine du dépôt
          cp extension/libtier0_srv.so hl2sdk-css/lib/linux/libtier0_srv.so
          
          # Créer une copie pour libvstdlib_srv.so
          cp extension/libtier0_srv.so hl2sdk-css/lib/linux/libvstdlib_srv.so
          
          # Vérifier que les fichiers existent
          ls -la hl2sdk-css/lib/linux/

      - name: Create custom header
        run: |
          mkdir -p custom_includes
          cat > custom_includes/platform_fix.h << 'EOF'
          #ifndef PLATFORM_FIX_H
          #define PLATFORM_FIX_H
          
          // Définir les macros de plateforme pour éviter l'erreur "Define a platform dir for me!"
          #define PLATFORM_POSIX 1
          #define PLATFORM_LINUX 1
          #define PLATFORM_WINDOWS 0
          #define PLATFORM_WINDOWS_PC 0
          
          // Ignorer les pragmas Windows
          #define pragma(x)
          #define __pragma(x)
          
          #endif // PLATFORM_FIX_H
          EOF

      - name: Modify AMBuildScript
        run: |
          # Supprimer le flag -Werror du fichier AMBuildScript
          sed -i 's/-Werror//g' extension/AMBuildScript
          
          # Ajouter des flags pour ignorer les avertissements problématiques
          sed -i "s/-msse,/-msse, '-Wno-unknown-pragmas', '-Wno-dangling-else',/g" extension/AMBuildScript

      - name: Build
        working-directory: extension
        shell: bash
        run: |
          mkdir build && cd build
          python ../configure.py --enable-optimize --sdks=css
          ambuild

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: TransmitManager-CSS-Linux
          path: extension/build/package